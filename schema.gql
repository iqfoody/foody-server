# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Wallet {
  _id: ID!
  points: Int!
  amount: Int!
}

type User {
  _id: ID!
  wallet: Wallet!
  name: String!
  phoneNumber: String!
  email: String
  password: String!
  type: String!
  country: String
  city: String!
  approvedEmail: Boolean
  approvedPhoneNumber: Boolean
  image: String
  state: String!
  createdAt: Timestamp
  updatedAt: Timestamp
  ip: String
  platform: String
  refreshToken: String
  deviceToken: String
}

"""
`Date` type as integer. Type represents date and time as number of milliseconds from start of UNIX epoch.
"""
scalar Timestamp

type UsersResponse {
  data: [User!]!
  pages: Int!
}

type Admin {
  _id: ID!
  name: String!
  email: String!
  password: String!
  type: String!
  image: String
  state: String!
  createdAt: Timestamp
  updatedAt: Timestamp
  ip: String
  platform: String
  refreshToken: String
  deviceToken: String
}

type Driver {
  _id: ID!
  name: String!
  phoneNumber: String!
  country: String
  city: String!
  image: String
  state: String!
  createdAt: Timestamp
  updatedAt: Timestamp
  ip: String
  platform: String
  refreshToken: String
  deviceToken: String
}

type Address {
  _id: ID!
  user: String!
  title: String!
  country: String
  city: String
  address: String
  building: String
  apartment: String
  description: String
  latitude: Float!
  longitude: Float!
}

type Category {
  _id: ID!
  title: String!
  titleEN: String!
  titleKR: String
  image: String!
  position: Int!
  state: String!
}

type Restaurant {
  _id: ID!
  category: Category
  title: String!
  titleEN: String!
  titleKR: String
  description: String!
  descriptionEN: String!
  descriptionKR: String
  image: String
  rating: Float!
  rates: Int!
  time: Int!
  deliveryPrice: Int!
  position: Int!
  state: String!
  createdAt: Timestamp
  updatedAt: Timestamp
}

type MealAddition {
  _id: ID!
  title: String!
  titleEN: String!
  titleKR: String
  price: Int
}

type MealIngredient {
  _id: ID!
  title: String!
  titleEN: String!
  titleKR: String
}

type Tag {
  _id: ID!
  title: String!
  titleEN: String!
  titleKR: String
  image: String
  position: Int!
  state: String!
}

type RestaurantCategory {
  _id: ID!
  restaurant: String!
  title: String!
  titleEN: String!
  titleKR: String
  position: Int!
}

type Meal {
  _id: ID!
  restaurant: Restaurant!
  tag: Tag
  restaurantCategory: RestaurantCategory!
  title: String!
  titleEN: String!
  titleKR: String
  description: String!
  descriptionEN: String!
  descriptionKR: String
  image: String
  additions: [MealAddition!]
  ingredients: [MealIngredient!]
  price: Int!
  previousPrice: Int
  points: Int
  pointsBack: Int
  position: Int
  state: String!
  createdAt: Timestamp
  updatedAt: Timestamp
}

type Favorite {
  _id: ID!
  user: String!
  restaurants: String
  meals: String
}

type Feedback {
  _id: ID!
  subject: String!
  message: String!
  name: String
  phoneNumber: String
  user: String
}

type OrderItem {
  meal: String!
  additions: [String!]
  addIngredients: [String!]
  removeIngredients: [String!]
  quantity: Int!
}

type Order {
  _id: ID!
  user: User!
  restaurant: Restaurant!
  address: Address!
  meals: [OrderItem!]!
  driver: Driver
  totalPrice: Float!
  totalPoints: Int
  price: Int
  recievedPrice: Int
  type: String!
  deliveryPrice: Int!
  tableware: Boolean!
  hasRating: Boolean!
  details: String!
  paymentMethod: String!
  state: String!
  promoCode: String
  discount: Int
  discountType: String
  walletAmount: Int
  walletPoints: Int
  pointsBack: Int
  createdAt: Timestamp
  updatedAt: Timestamp
}

type PromoCode {
  _id: ID!
  name: String!
  users: [String!]
  user: User
  type: String!
  discount: Int!
  isPublic: Boolean!
  expire: Timestamp!
  state: String!
  createdAt: Timestamp
  updatedAt: Timestamp
}

type Rate {
  _id: ID!
  user: String!
  restaurant: String!
  rate: Int!
  description: String
}

type Days {
  d1: Int!
  d2: Int!
  d3: Int!
  d4: Int!
  d5: Int!
  d6: Int!
  d7: Int!
  d8: Int!
  d9: Int!
  d10: Int!
  d11: Int!
  d12: Int!
  d13: Int!
  d14: Int!
  d15: Int!
  d16: Int!
  d17: Int!
  d18: Int!
  d19: Int!
  d20: Int!
  d21: Int!
  d22: Int!
  d23: Int!
  d24: Int!
  d25: Int!
  d26: Int!
  d27: Int!
  d28: Int
  d29: Int
  d30: Int
  d31: Int
}

type Months {
  m0: Days!
  m1: Days!
  m2: Days!
  m3: Days!
  m4: Days!
  m5: Days!
  m6: Days!
  m7: Days!
  m8: Days!
  m9: Days!
  m10: Days!
  m11: Days!
}

type LoginAdmin {
  accessToken: String!
  refreshToken: String!
  user: Admin!
}

type Advertisement {
  _id: ID!
  target: ID
  user: String
  title: String!
  titleEN: String!
  titleKR: String
  image: String!
  type: String
  position: Int!
  state: String!
}

type FeedbacksLimit {
  data: [Feedback!]!
  pages: Int!
}

type MealsResponse {
  data: [Meal!]!
  pages: Int!
}

type Notification {
  """Example field (placeholder)"""
  exampleField: Int!
}

type OrdersResponse {
  data: [Order!]!
  pages: Int!
}

type RatingResponse {
  user: User!
  rate: Int!
}

type StatusResponse {
  Pending: Int!
  InProgress: Int!
  InDelivery: Int!
  Completed: Int!
  Canceled: Int!
}

type WeekResponse {
  d0: Int!
  d1: Int!
  d2: Int!
  d3: Int!
  d4: Int!
  d5: Int!
  d6: Int!
}

type HomeResponse {
  orders: Int!
  recentlyOrders: [Order!]
  week: WeekResponse!
  status: StatusResponse!
  users: Int!
  recentlyUsers: [User!]
  rating: Float
  total: Int
  recentlyRating: [RatingResponse!]
  restaurants: Int
  meals: Int!
  drivers: Int!
}

type Transaction {
  _id: ID!
  user: User!
  admin: Admin
  order: Order
  type: String!
  procedure: String!
  amount: Int!
  previous: Int!
  description: String!
  paymentMethod: String
  state: String!
  createdAt: Timestamp
  updatedAt: Timestamp
}

type TransactionResponse {
  data: [Transaction!]!
  pages: Int!
}

type Search {
  """Example field (placeholder)"""
  exampleField: Int!
}

type Query {
  users(limitEntity: LimitEntity!): UsersResponse!
  user(id: ID!): User!
  usersReport(date: String!): Months!
  wallet(id: ID!): Wallet!
  favorites: [Favorite!]!
  favorite(id: ID!): Favorite!
  addresses(id: ID!): [Address!]!
  address(id: ID!): Address!
  refresh: String!
  admins: [Admin!]!
  admin(id: ID!): Admin!
  infoAdmin: Admin!
  drivers: [Driver!]!
  driver(id: ID!): Driver!
  advertisements: [Advertisement!]!
  advertisement(id: ID!): Advertisement!
  categories: [Category!]!
  category(id: ID!): Category!
  feedbacks(limitEntity: LimitEntity!): FeedbacksLimit!
  feedback(id: ID!): Feedback!
  meals(limitEntity: LimitEntity!): MealsResponse!
  searchMeals(query: String!): [Meal!]!
  meal(id: ID!): Meal!
  notifications: [Notification!]!
  notification(id: Int!): Notification!
  orders(limitEntity: LimitEntity!): OrdersResponse!
  homeValues: HomeResponse!
  ordersUser(limitEntity: LimitEntity!): OrdersResponse!
  order(id: ID!): Order!
  profitsReport(date: String!): Months!
  ordersReport(date: String!): Months!
  promoCodes: [PromoCode!]!
  promoCode(id: ID!): PromoCode!
  rates: [Rate!]!
  rate(id: ID!): Rate!
  restaurants: [Restaurant!]!
  searchRestaurants(query: String!): [Restaurant!]!
  restaurant(id: ID!): Restaurant!
  restaurantCategories(id: ID!): [RestaurantCategory!]!
  restaurantCategory(id: ID!): RestaurantCategory!
  transactions(limitEntity: LimitEntity!): TransactionResponse!
  amountTransactions(limitEntity: LimitEntity!): TransactionResponse!
  pointsTransactions(limitEntity: LimitEntity!): TransactionResponse!
  userTransactions(limitEntity: LimitEntity!): TransactionResponse!
  adminTransactions(limitEntity: LimitEntity!): TransactionResponse!
  transaction(id: String!): Transaction!
  tags: [Tag!]!
  tag(id: ID!): Tag!
  searchUsers(searchQuery: SearchInput!): UsersResponse!
  search(id: Int!): Search!
}

input LimitEntity {
  page: Int!
  limit: Int!
  orderBy: Int
  state: String
  user: ID
}

input SearchInput {
  query: String!
  page: Int
}

type Mutation {
  createUser(createUserInput: CreateUserInput!): User!
  updateUser(updateUserInput: UpdateUserInput!): String!
  passwordUser(passwordUserInput: UpdatePasswordUser!): String!
  stateUser(stateInput: StateInput!): String!
  removeUser(id: ID!): String!
  updateWallet(updateWalletInput: UpdateWalletInput!): String!
  createFavorite(createFavoriteInput: CreateFavoriteInput!): Favorite!
  removeFavorite(id: ID!): Favorite!
  createAddress(createAddressInput: CreateAddressInput!): Address!
  updateAddress(updateAddressInput: UpdateAddressInput!): String!
  removeAddress(id: ID!): String!
  loginAdmin(loginAdminInput: LoginInput!): LoginAdmin!
  logoutAdmin: String!
  createAdmin(createAdminInput: CreateAdminInput!): Admin!
  updateAdmin(updateAdminInput: UpdateAdminInput!): String!
  passwordAdmin(passwordAdminInput: UpdatePasswordUser!): String!
  stateAdmin(stateInput: StateInput!): String!
  removeAdmin(id: ID!): String!
  createDriver(createDriverInput: CreateDriverInput!): Driver!
  updateDriver(updateDriverInput: UpdateDriverInput!): String!
  passwordDriver(passwordDriverInput: UpdatePasswordUser!): String!
  stateDriver(stateInput: StateInput!): String!
  removeDriver(id: ID!): String!
  updateAdvertisement(updateAdvertisementInput: UpdateAdvertisementInput!): String!
  positionAdvertisement(updatePositionInput: [UpdatePositionInput!]!): String!
  stateAdvertisement(stateInput: StateInput!): String!
  removeAdvertisement(id: ID!): String!
  updateCategory(updateCategoryInput: UpdateCategoryInput!): String!
  positionCategory(updatePositionInput: [UpdatePositionInput!]!): String!
  stateCategory(stateInput: StateInput!): String!
  removeCategory(id: ID!): String!
  removeFeedback(id: ID!): String!
  createMeal(createMealInput: CreateMealInput!): Meal!
  updateMeal(updateMealInput: UpdateMealInput!): String!
  stateMeal(stateInput: StateInput!): String!
  positionMeal(updatePositionInput: [UpdatePositionInput!]!): String!
  removeMeal(id: ID!): String!
  createMealObject(createMealObject: CreateMealObject!): MealAddition!
  updateMealObject(updateMealObject: UpdateMealObject!): String!
  removeMealObject(removeMealObject: RemoveMealObject!): String!
  createNotification(createNotificationInput: CreateNotificationInput!): Notification!
  updateNotification(updateNotificationInput: UpdateNotificationInput!): Notification!
  removeNotification(id: Int!): Notification!
  createOrder(createOrderInput: CreateOrderInput!): Order!
  updateOrder(updateOrderInput: UpdateOrderInput!): String!
  removeOrder(id: ID!): String!
  createPromoCode(createPromoCodeInput: CreatePromoCodeInput!): PromoCode!
  updatePromoCode(updatePromoCodeInput: UpdatePromoCodeInput!): String!
  statePromoCode(stateInput: StateInput!): String!
  removePromoCode(id: ID!): String!
  createRate(createRateInput: CreateRateInput!): Rate!
  updateRate(updateRateInput: UpdateRateInput!): Rate!
  removeRate(id: ID!): Rate!
  createRestaurant(createRestaurantInput: CreateRestaurantInput!): Restaurant!
  updateRestaurant(updateRestaurantInput: UpdateRestaurantInput!): String!
  stateRestaurant(stateInput: StateInput!): String!
  positionRestaurant(updatePositionInput: [UpdatePositionInput!]!): String!
  removeRestaurant(id: ID!): String!
  createRestaurantCategory(createRestaurantCategoryInput: CreateRestaurantCategoryInput!): RestaurantCategory!
  updateRestaurantCategory(updateRestaurantCategoryInput: UpdateRestaurantCategoryInput!): String!
  positionRestaurantCategory(updatePositionInput: [UpdatePositionInput!]!): String!
  removeRestaurantCategory(id: ID!): String!
  createTransaction(createTransactionInput: CreateTransactionInput!): Transaction!
  updateTransaction(updateTransactionInput: UpdateTransactionInput!): Transaction!
  removeTransaction(id: String!): Transaction!
  createTag(createTagInput: CreateTagInput!): Tag!
  updateTag(updateTagInput: UpdateTagInput!): String!
  StateTag(stateInput: StateInput!): String!
  positionTag(updatePositionInput: [UpdatePositionInput!]!): String!
  removeTag(id: ID!): String!
}

input CreateUserInput {
  name: String!
  phoneNumber: String!
  email: String
  password: String!
  type: String
  city: String
  image: String
  deviceToken: String
  ip: String
  platform: String
  refreshToken: String
}

input UpdateUserInput {
  name: String
  phoneNumber: String
  email: String
  password: String
  type: String
  city: String
  image: String
  deviceToken: String
  ip: String
  platform: String
  refreshToken: String
  id: ID
}

input UpdatePasswordUser {
  id: ID
  oldPassword: String
  password: String
}

input StateInput {
  id: ID!
  state: String!
}

input UpdateWalletInput {
  _id: ID
  id: ID
  amount: Int
  points: Int
}

input CreateFavoriteInput {
  user: ID!
}

input CreateAddressInput {
  user: ID!
  title: String!
  country: String
  city: String
  address: String
  building: String
  apartment: String
  description: String
  latitude: Float!
  longitude: Float!
}

input UpdateAddressInput {
  user: ID
  title: String
  country: String
  city: String
  address: String
  building: String
  apartment: String
  description: String
  latitude: Float
  longitude: Float
  id: ID
}

input LoginInput {
  username: String!
  password: String!
  deviceToken: String
}

input CreateAdminInput {
  name: String!
  email: String!
  password: String!
  type: String!
  image: String
}

input UpdateAdminInput {
  name: String
  email: String
  password: String
  type: String
  image: String
  id: ID
  ip: String
  platform: String
  refreshToken: String
  deviceToken: String
}

input CreateDriverInput {
  name: String!
  phoneNumber: String!
  password: String!
  country: String
  city: String!
  image: String
}

input UpdateDriverInput {
  name: String
  phoneNumber: String
  password: String
  country: String
  city: String
  image: String
  id: ID
  ip: String
  platform: String
  refreshToken: String
  deviceToken: String
}

input UpdateAdvertisementInput {
  target: ID
  user: ID
  title: String
  titleEN: String
  titleKR: String
  image: String
  type: String
  id: Int
}

input UpdatePositionInput {
  id: ID!
  position: Int!
}

input UpdateCategoryInput {
  title: String
  titleEN: String
  titleKR: String
  image: String
  id: ID
}

input CreateMealInput {
  restaurant: ID!
  tag: ID
  restaurantCategory: ID!
  title: String!
  titleEN: String!
  titleKR: String
  description: String!
  descriptionEN: String!
  descriptionKR: String
  image: String
  additions: [CreateMealAdditionInput!]
  ingredients: [CreateMealIngredientInput!]
  price: Int!
  previousPrice: Int
  points: Int
  pointsBack: Int
}

input CreateMealAdditionInput {
  title: String!
  titleEN: String!
  titleKR: String
  price: Int!
}

input CreateMealIngredientInput {
  title: String!
  titleEN: String!
  titleKR: String
}

input UpdateMealInput {
  restaurant: ID
  tag: ID
  restaurantCategory: ID
  title: String
  titleEN: String
  titleKR: String
  description: String
  descriptionEN: String
  descriptionKR: String
  image: String
  additions: [CreateMealAdditionInput!]
  ingredients: [CreateMealIngredientInput!]
  price: Int
  previousPrice: Int
  points: Int
  pointsBack: Int
  id: ID!
}

input CreateMealObject {
  title: String
  titleEN: String
  titleKR: String
  price: Int
  id: ID!
}

input UpdateMealObject {
  title: String
  titleEN: String
  titleKR: String
  price: Int
  id: ID!
  _id: ID!
}

input RemoveMealObject {
  id: ID!
  addition: ID
  ingredient: ID
}

input CreateNotificationInput {
  """Example field (placeholder)"""
  exampleField: Int!
}

input UpdateNotificationInput {
  """Example field (placeholder)"""
  exampleField: Int
  id: Int!
}

input CreateOrderInput {
  user: ID
  restaurant: ID!
  address: ID!
  meals: [CreateOrderItemInput!]!
  driver: ID!
  tableware: Boolean
  details: String
  paymentMethod: String
  promoCode: String
}

input CreateOrderItemInput {
  meal: ID!
  additions: [String!]
  addIngredients: [String!]
  removeIngredients: [String!]
  quantity: Int!
}

input UpdateOrderInput {
  user: ID
  restaurant: ID
  address: ID
  meals: [CreateOrderItemInput!]
  driver: ID
  tableware: Boolean
  details: String
  paymentMethod: String
  promoCode: String
  id: ID!
}

input CreatePromoCodeInput {
  name: String!
  user: ID
  type: String!
  discount: Int!
  isPublic: Boolean
  expire: Timestamp!
}

input UpdatePromoCodeInput {
  name: String
  user: ID
  type: String
  discount: Int
  isPublic: Boolean
  expire: Timestamp
  id: ID!
}

input CreateRateInput {
  user: ID!
  restaurant: ID
  driver: ID
  rate: Int!
  description: String
}

input UpdateRateInput {
  user: ID
  restaurant: ID
  driver: ID
  rate: Int
  description: String
  id: ID!
}

input CreateRestaurantInput {
  category: ID
  title: String!
  titleEN: String!
  titleKR: String
  description: String!
  descriptionEN: String!
  descriptionKR: String
  image: String
  time: Int!
  deliveryPrice: Int
}

input UpdateRestaurantInput {
  category: ID
  title: String
  titleEN: String
  titleKR: String
  description: String
  descriptionEN: String
  descriptionKR: String
  image: String
  time: Int
  deliveryPrice: Int
  id: ID
  rating: Float
  rates: Int
}

input CreateRestaurantCategoryInput {
  restaurant: ID!
  title: String!
  titleEN: String!
  titleKR: String
}

input UpdateRestaurantCategoryInput {
  restaurant: ID
  title: String
  titleEN: String
  titleKR: String
  id: ID!
}

input CreateTransactionInput {
  user: ID!
  admin: ID
  order: ID
  type: String!
  procedure: String!
  amount: Int!
  previous: Int
  description: String!
  paymentMethod: String
  state: String
}

input UpdateTransactionInput {
  user: ID
  admin: ID
  order: ID
  type: String
  procedure: String
  amount: Int
  previous: Int
  description: String
  paymentMethod: String
  state: String
  id: ID!
}

input CreateTagInput {
  title: String!
  titleEN: String!
  titleKR: String
  image: String
}

input UpdateTagInput {
  title: String
  titleEN: String
  titleKR: String
  image: String
  id: ID!
}